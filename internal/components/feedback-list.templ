package components

import (
	"log"
	"purple-check/internal/database"
	"purple-check/internal/models"
)

func getFeedbackList(username string, role string) []models.Feedback {
	db, closer := database.GetDB()
	defer closer()

	var feedbackList []models.Feedback

	stmt, err := db.Prepare("SELECT id, giver, receiver, rating, created_at FROM feedback WHERE " + role + " = ? ORDER BY created_at DESC")
	if err != nil {
		log.Println(err)
	}

	rows, err := stmt.Query(username)
	if err != nil {
		log.Println(err)
		return []models.Feedback{}
	}

	for rows.Next() {
		var feedback models.Feedback

		err = rows.Scan(&feedback.ID, &feedback.Giver, &feedback.Receiver, &feedback.Rating, &feedback.CreatedAt)
		if err != nil {
			log.Println(err)
		}

		feedbackList = append(feedbackList, feedback)
	}

	return feedbackList
}

var dateFormatter = templ.NewOnceHandle()

templ FeedbackList(p string) {
	{{
	feedbackList := getFeedbackList(p, "receiver")
	}}
	if len(feedbackList) == 0 {
		<p>No feedback yet.</p>
	} else {
		<ul class="divide-y">
			for _, feedback := range feedbackList {
				<li class="feedback py-4 grid">
					<div class="mb-1 text-muted-foreground">
						<p class="text-sm">
							{ feedback.Rating }
						</p>
					</div>
					<div class="flex space-x-2 items-center">
						<h3 class="font-medium text-primary">
							<a href={ templ.URL("/profile/" + feedback.Giver) }>{ feedback.Giver }</a>
						</h3>
						<span>
							.
						</span>
						<p class="text-muted-foreground">
							<time datetime={ feedback.CreatedAt } class="created-at-datetime">{ feedback.CreatedAt }</time>
						</p>
					</div>
				</li>
			}
		</ul>
	}
	@dateFormatter.Once() {
		<script>
        document.querySelectorAll('.created-at-datetime').forEach((datetime) => {
            const createdAt = datetime.getAttribute('datetime');
            const date = new Date(createdAt);

            const since = Date.now() - date.getTime();
            if (since < 1000 * 60) {
                datetime.innerHTML = 'Just now';
                return;
            }
            if (since < 1000 * 60 * 60) {
                const minutes = Math.floor(since / (1000 * 60));
                datetime.innerHTML = `${minutes} minute${minutes > 1 ? 's' : ''} ago`;
                return;
            }
            if (since < 1000 * 60 * 60 * 24) {
                const hours = Math.floor(since / (1000 * 60 * 60));
                datetime.innerHTML = `${hours} hour${hours > 1 ? 's' : ''} ago`;
                return;
            }

            datetime.innerHTML = date.toLocaleDateString(undefined, {
                month: 'short',
                day: 'numeric',
                year: 'numeric',
            });
        });
    	</script>
	}
}
