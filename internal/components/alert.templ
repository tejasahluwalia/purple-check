package components

import "purple-check/internal/utils"

type AlertVariant string

const (
	AlertVariantDefault     AlertVariant = "default"
	AlertVariantDestructive AlertVariant = "destructive"
)

type AlertProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
	Variant    AlertVariant
}

type AlertTitleProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

type AlertDescriptionProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

templ Alert(props ...AlertProps) {
	{{ var p AlertProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<div
		if p.ID != "" {
			id={ p.ID }
		}
		class={
			utils.TwMerge(
				"relative w-full p-4",
				"[&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4",
				"[&>svg+div]:translate-y-[-3px] [&:has(svg)]:pl-11",
				"rounded-lg border",
				getAlertVariantClasses(p.Variant),
				p.Class,
			),
		}
		role="alert"
		{ p.Attributes... }
	>
		{ children... }
	</div>
}

templ AlertTitle(props ...AlertTitleProps) {
	{{ var p AlertTitleProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<h5
		if p.ID != "" {
			id={ p.ID }
		}
		class={
			utils.TwMerge(
				"mb-2 font-medium leading-none tracking-tight",
				p.Class,
			),
		}
		{ p.Attributes... }
	>
		{ children... }
	</h5>
}

templ AlertDescription(props ...AlertDescriptionProps) {
	{{ var p AlertDescriptionProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<div
		if p.ID != "" {
			id={ p.ID }
		}
		class={
			utils.TwMerge(
				"[&_p]:leading-relaxed text-sm",
				p.Class,
			),
		}
		{ p.Attributes... }
	>
		{ children... }
	</div>
}

func getAlertVariantClasses(variant AlertVariant) string {
	switch variant {
	case AlertVariantDestructive:
		return "border-destructive text-destructive"
	default:
		return "border-border text-foreground"
	}
}
