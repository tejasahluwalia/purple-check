package components

import (
	"fmt"
	"strconv"

	"purple-check/internal/config"
)

templ ThemeSwitcherScript() {
	{{ handle := templ.NewOnceHandle() }}
	@handle.Once() {
		<script nonce={ templ.GetNonce(ctx) }>
			// Initial theme setup
			document.documentElement.classList.toggle('dark', localStorage.getItem('appTheme') === 'dark');

			document.addEventListener('alpine:init', () => {
				Alpine.data('themeHandler', () => ({
					isDark: localStorage.getItem('appTheme') === 'dark',
					themeClasses() {
						return this.isDark ? 'text-white' : 'bg-white text-black'
					},
					toggleTheme() {
						this.isDark = !this.isDark;
						localStorage.setItem('appTheme', this.isDark ? 'dark' : 'light');
						document.documentElement.classList.toggle('dark', this.isDark);
					}
				}))
			})
		</script>
	}
}

type Head struct {
	Title       string
	Description string
	URL         string
}

templ Layout(body templ.Component, head Head) {
	{{
		username := GetRequestContext(ctx).PathValue("username")
		if username != "" {
			rating, totalRatings := GetProfileRating(username)
			positivePercentage := (rating / float64(totalRatings)) * 100
			ratingPlural := "ratings"
			if totalRatings == 1 {
				ratingPlural = "rating"
			}
			if totalRatings > 0 {
				head.Title = fmt.Sprintf("%s | %s%% positive (%d %s)", head.Title, strconv.FormatFloat(positivePercentage, 'f', 0, 32), totalRatings, ratingPlural)
			}
		}
	}}
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<title>{ head.Title }</title>
			if head.Description != "" {
				<meta name="description" content={ head.Description }/>
			}
			<meta property="fb:app_id" content={ config.APP_ID }/>
			<meta property="og:title" content={ head.Title }/>
			if head.Description != "" {
				<meta property="og:description" content={ head.Description }/>
			}
			<meta property="og:type" content="website"/>
			<meta property="og:url" content={ head.URL }/>
			<meta property="og:image" content="https://www.purple-check.org/static/purple-check-logo.png"/>
			<link rel="canonical" href={ head.URL }/>
			<link rel="stylesheet" href="/static/css/output.css"/>
			<link rel="icon" href="/static/favicon.ico"/>
			<link rel="apple-touch-icon" sizes="180x180" href="/static/apple-touch-icon.png"/>
			<link rel="icon" type="image/png" sizes="32x32" href="/static/favicon-32x32.png"/>
			<link rel="icon" type="image/png" sizes="16x16" href="/static/favicon-16x16.png"/>
			<link rel="manifest" href="/static/site.webmanifest"/>
			<script src="/static/js/htmx.min.js"></script>
			<script defer="" src="/static/js/alpine.min.js"></script>
			@ThemeSwitcherScript()
		</head>
		<body
			class="min-h-svh flex flex-col"
			x-data="themeHandler"
			x-bind:class="themeClasses"
		>
			@Header()
			<div class="flex-1 container max-w-(--breakpoint-md) mx-auto px-4">
				@body
			</div>
			@Footer()
		</body>
		<script>
			if (window.location.hash && window.location.hash == "#_") {
				history.replaceState({}, "", window.location.pathname);
			};
		</script>
	</html>
}
